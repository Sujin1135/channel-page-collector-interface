// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: channel_page.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChannelPage_GetSubscriberNames_FullMethodName = "/channel.page.collector.ChannelPage/GetSubscriberNames"
)

// ChannelPageClient is the client API for ChannelPage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelPageClient interface {
	GetSubscriberNames(ctx context.Context, in *GetSubscriberNamesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSubscriberNamesResponse], error)
}

type channelPageClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelPageClient(cc grpc.ClientConnInterface) ChannelPageClient {
	return &channelPageClient{cc}
}

func (c *channelPageClient) GetSubscriberNames(ctx context.Context, in *GetSubscriberNamesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSubscriberNamesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChannelPage_ServiceDesc.Streams[0], ChannelPage_GetSubscriberNames_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSubscriberNamesRequest, GetSubscriberNamesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelPage_GetSubscriberNamesClient = grpc.ServerStreamingClient[GetSubscriberNamesResponse]

// ChannelPageServer is the server API for ChannelPage service.
// All implementations must embed UnimplementedChannelPageServer
// for forward compatibility.
type ChannelPageServer interface {
	GetSubscriberNames(*GetSubscriberNamesRequest, grpc.ServerStreamingServer[GetSubscriberNamesResponse]) error
	mustEmbedUnimplementedChannelPageServer()
}

// UnimplementedChannelPageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChannelPageServer struct{}

func (UnimplementedChannelPageServer) GetSubscriberNames(*GetSubscriberNamesRequest, grpc.ServerStreamingServer[GetSubscriberNamesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSubscriberNames not implemented")
}
func (UnimplementedChannelPageServer) mustEmbedUnimplementedChannelPageServer() {}
func (UnimplementedChannelPageServer) testEmbeddedByValue()                     {}

// UnsafeChannelPageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelPageServer will
// result in compilation errors.
type UnsafeChannelPageServer interface {
	mustEmbedUnimplementedChannelPageServer()
}

func RegisterChannelPageServer(s grpc.ServiceRegistrar, srv ChannelPageServer) {
	// If the following call pancis, it indicates UnimplementedChannelPageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChannelPage_ServiceDesc, srv)
}

func _ChannelPage_GetSubscriberNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSubscriberNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelPageServer).GetSubscriberNames(m, &grpc.GenericServerStream[GetSubscriberNamesRequest, GetSubscriberNamesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChannelPage_GetSubscriberNamesServer = grpc.ServerStreamingServer[GetSubscriberNamesResponse]

// ChannelPage_ServiceDesc is the grpc.ServiceDesc for ChannelPage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelPage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.page.collector.ChannelPage",
	HandlerType: (*ChannelPageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSubscriberNames",
			Handler:       _ChannelPage_GetSubscriberNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "channel_page.proto",
}
